<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parker Spradley</title>
    <link>/</link>
    <description>Recent content on Parker Spradley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 11 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Applications in Biology: FASTA</title>
      <link>/post/2020/12/11/python-applications-in-biology/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/12/11/python-applications-in-biology/</guid>
      <description>Using a RegEx Function to Count the # of Sequences in a FASTA File FASTA is a text-based format for representing nucleotide or amino acid sequences using single-letter code: Adenine = A, Thymine = T, C = Cytosine. A popular, free tool for comparing FASTA sequences is NIH&#39;s BLAST: https://blast.ncbi.nlm.nih.gov/Blast.cgi
BLAST&#39;s algorithm is written in C and C++, but regular expressions in Python can perform a lot of the same functions as BLAST such as counting k-mers, calculating sequence alignment, etc.</description>
    </item>
    
    <item>
      <title>R and Python Communication with Reticulate</title>
      <link>/post/2020/12/11/r-and-python-communication-with-reticulate/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/12/11/r-and-python-communication-with-reticulate/</guid>
      <description> R and Python Communication Using the &#39;Reticulate&#39; Package Creating an object in R:
#install.packages(&amp;quot;reticulate&amp;quot;) library(reticulate) xmas &amp;lt;- &amp;quot;Eat all the Christmas&amp;quot; Accessing the object with Python:
 cookie = &amp;quot;cookies&amp;quot; print(r.xmas,cookie) ## Eat all the Christmas cookies Here you go!  </description>
    </item>
    
    <item>
      <title>Project 1: Exploratory Data Analysis</title>
      <link>/project/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project1/</guid>
      <description>Data Wrangling and Data Exploration Data Sources First source: https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/Medicare-Geographic-Variation/GV_PUF State/County Table: All Beneficiaries Second source: https://aspe.hhs.gov/compilation-state-data-affordable-care-act Compilation of State Data on the Affordable Care Act
0. Introduction (4 pts) My project combines a dataset from the Centers for Medicare &amp;amp; Medicaid Services (CMS) with a dataset from the U.S. Department of Health and Human services. Both of these datasets contain Medicare beneficiary data grouped by state from the year 2015.</description>
    </item>
    
    <item>
      <title>Project 2: Modeling, Testing, and Predicting</title>
      <link>/project/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project2/</guid>
      <description>Modeling Introduction This dataset, titled NCCTG Lung Cancer Data, contains information about survival times and the physical well-being of patients from the North Central Cancer Treatment Group who have advanced lung cancer. The dataset has 227 observations of 10 variables, and each observation corresponds to a different patient. There are 4 categorical variables: inst, status, sex, and ph.ecog. Institution refers to the patient&#39;s institution code, status refers to whether or not the patient died during the observation time of the study, sex refers to whether the patient is male or female, and ph.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/</guid>
      <description> Check out some of my coding projects below:
 Wrangling &amp;amp; Exploratory Data Analysis
 Modeling, Inference, Prediction
  -- </description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/resume/</guid>
      <description>    </description>
    </item>
    
  </channel>
</rss>
